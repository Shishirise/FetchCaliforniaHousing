# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pfh3qBQwa4aaFaQHIpvUHKyDo34XMKfJ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.datasets import fetch_california_housing

housing = fetch_california_housing()
df = pd.DataFrame(housing.data, columns=housing.feature_names)

print(df.columns)

print(df.head())

#check discription

print(housing.DESCR)

print(housing.target)

print(housing.feature_names)

#preparing for datasets

datasets = pd.DataFrame(housing.data, columns=housing.feature_names)
datasets.head()

datasets['price']=housing.target

datasets.head()

datasets.info()

datasets.describe()

#check the missing value
datasets.isnull().sum()

#Exploratory Data Analysis
## Correlation
datasets.corr()

import seaborn as sns
sns.pairplot(datasets)

plt.scatter(datasets['Population'],datasets['price'])

sns.regplot(x="Population",y="price",data=datasets)

## Independent and Dependent features
X=datasets.iloc[:,:-1]
y= datasets.iloc[:,-1]
X.head()

y

## Train Test Split
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=42)

X_train

X_test

y_train

y_test

##Standardize the dataset
from sklearn.preprocessing import StandardScaler
scaler= StandardScaler()
X_train= scaler.fit_transform(X_train)
X_test= scaler.transform(X_test)

X_train

X_test

#Moddel Training

from sklearn.linear_model import LinearRegression
regression=LinearRegression()
regression.fit(X_train,y_train)

## print coefficeints and intercept
print(regression.coef_)

print(regression.intercept_)

## On which parameters the model has been trained?
regression.get_params()

## Prediction with Test Data
reg_pred=regression.predict(X_test)
reg_pred

##PLot a scatter plot for prediction
plt.scatter(y_test,reg_pred)

#Error
residuals=y_test-reg_pred
residuals

##Plot the residuals
sns.displot(residuals,kind="kde")

## Scaltter plot prediction Vs residuals
plt.scatter(reg_pred,residuals)



from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error

print(mean_absolute_error(y_test,reg_pred))
print(mean_squared_error(y_test,reg_pred))
print(np.sqrt(mean_squared_error(y_test,reg_pred)))

# R square and adjusted R square
from sklearn.metrics import r2_score
score=r2_score(y_test,reg_pred)
print(score)

#Display Adjusted R-square
1-(1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)

#New data prediction
housing.data[0].reshape(1,-1)

# Transformation of new data
scaler.transform(housing.data[0].reshape(1,-1))

regression.predict(housing.data[0].reshape(1,-1))

#Pickling The model for Deployment
import pickle
pickle.dump(regression,open('regmodel.pkl','wb'))
pickled_model=pickle.load(open('regmodel.pkl','rb'))

##Prediction
pickled_model.predict(scaler.transform(housing.data[0].reshape(1,-1)))